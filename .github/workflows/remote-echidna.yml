name: Remote Echidna 

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      project_git_url:
        required: true
        type: string
      project_git_checkout:
        required: true
        type: string
      run_tests_cmd:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      REMOTE_ECHIDNA_S3_BUCKET:
        required: true
      REMOTE_ECHIDNA_EC2_INSTANCE_KEY_NAME:
        required: true


jobs:
  remote-echidna:
    name: Run remote-echidna
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clone remote-echidna
        run: git submodule add https://github.com/aviggiano/remote-echidna.git
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Create tfvars file
        working-directory: ./remote-echidna
        run: |
          echo 'project = "${{ inputs.project }}"' >> ${{ inputs.project }}.tfvars
          echo 'project_git_url = "${{ inputs.project_git_url }}"' >> ${{ inputs.project }}.tfvars
          echo 'project_git_checkout = "${{ inputs.project_git_checkout }}"' >> ${{ inputs.project }}.tfvars
          echo 's3_bucket = "${{ secrets.REMOTE_ECHIDNA_S3_BUCKET }}"' >> ${{ inputs.project }}.tfvars
          echo 'ec2_instance_key_name = "${{ secrets.REMOTE_ECHIDNA_EC2_INSTANCE_KEY_NAME }}"' >> ${{ inputs.project }}.tfvars
          echo 'run_tests_cmd = "${{ inputs.run_tests_cmd }}"' >> ${{ inputs.project }}.tfvars
      - name: Provision
        working-directory: ./remote-echidna
        run: ./scripts/provision.sh ${{ secrets.REMOTE_ECHIDNA_S3_BUCKET }} ${{ inputs.project_git_checkout }}
      - name: Terraform validate
        working-directory: ./remote-echidna
        run: |
          terraform init
          terraform validate
      - name: Destroy previous instance
        working-directory: ./remote-echidna
        run: |
          terraform init
          terraform destroy -target aws_instance.ec2_instance -var-file ${{ inputs.project }}.tfvars -no-color -input=false -auto-approve
      - name: Terraform Apply
        id: apply
        working-directory: ./remote-echidna
        run: |
          terraform init
          terraform apply -var-file ${{ inputs.project }}.tfvars -no-color -input=false -auto-approve
          EC2_INSTANCE_ID=$(terraform output ec2_instance_id)
          echo "EC2_INSTANCE_ID=${EC2_INSTANCE_ID}" >> $GITHUB_OUTPUT
      - name: Provisioned
        working-directory: ./remote-echidna
        run: ./scripts/provisioned.sh ${{ secrets.REMOTE_ECHIDNA_S3_BUCKET }} ${{ inputs.project_git_checkout }} ${{ steps.apply.outputs.EC2_INSTANCE_ID }}

